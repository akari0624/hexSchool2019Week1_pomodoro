{"version":3,"sources":["components/movecircle/styled.tsx","components/movecircle/movecircle.tsx","index.tsx"],"names":["PositionRelativeDivWrapper","Styled","div","_templateObject","InnerCanvas","canvas","_templateObject2","OutterCanvas","_templateObject3","MoveCircle","_ref","_ref$outterCanvasColo","outterCanvasColor","width","height","passedSeconds","_PassedSeconds","useRef","innerCanvasRef","canvasRef","clockLoopRunFuncRef","requestDrawMoveGraduallyCircleFrame","useCallback","ctx","ctxWidth","ctxHeight","eTime","clearRect","translate","rotate","Math","PI","beginPath","arc","current","strokeStyle","stroke","fillStyle","lineTo","closePath","fill","setTransform","requestAnimationFrame","drawInnerCircle","innerCtx","useLayoutEffect","canvas1Width","offsetWidth","canvas1Height","offsetHeight","getContext","Date","now","innerCanvasWidth","innerCanvasHeight","react_default","a","createElement","ref","CanvasWrapDiv","src_templateObject","rootElement","document","getElementById","render","_useState","useState","_useState2","Object","slicedToArray","isPaused","setIsPaused","_useState3","_useState4","setPassedSeconds","handleIsPause","e","useEffect","intervalID","setInterval","clearInterval","className","onClick","movecircle"],"mappings":"0iBAEA,IAAMA,EAA6BC,IAAOC,IAAVC,KAM1BC,EAAcH,IAAOI,OAAVC,KAKXC,EAAeN,IAAOI,OAAVG,KCmGHC,EArGI,SAAAC,GAKN,IAAAC,EAAAD,EAJXE,yBAIW,IAAAD,EAJS,UAITA,EAHXE,EAGWH,EAHXG,MACAC,EAEWJ,EAFXI,OACAC,EACWL,EADXK,cAEMC,EAAiBC,iBAAe,GAChCC,EAAiBD,iBAAiC,MAClDE,EAAYF,iBAAiC,MAG7CG,EAAsBH,iBAAoC,MAC1DI,EAAsCC,sBAC1C,SAACC,EAA+BC,EAAkBC,GAAlD,OAAwE,SACtEC,GAEAH,EAAII,UAAU,EAAG,EAAGH,EAAUC,GAC9BF,EAAIK,UAAUJ,EAAW,EAAGC,EAAY,GACxCF,EAAIM,QAAQC,KAAKC,GAAK,GACtBR,EAAIS,YAEJT,EAAIU,IACF,EACA,GACCT,EAAWC,GAAa,EACzB,EAAIK,KAAKC,GACRf,EAAekB,QAhBmB,KAgB0B,EAAIJ,KAAKC,IAExER,EAAIY,YAAcvB,EAClBW,EAAIa,SACJb,EAAIc,UAAYzB,EAChBW,EAAIe,OAAO,EAAG,GACdf,EAAIgB,YACJhB,EAAIiB,OACJjB,EAAIkB,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCrB,EAAoBc,SAClBQ,sBAAsBtB,EAAoBc,WAE9C,CA5BuC,KA4BLd,EAAqBR,IAGnD+B,EAAkBrB,sBACtB,SACEsB,EACApB,EACAC,GAEAmB,EAAShB,UAAUJ,EAAW,EAAGC,EAAY,GAC7CmB,EAASZ,YACTY,EAASX,IAAI,EAAG,GAAIT,EAAWC,GAAa,EAAI,GAAI,EAAG,EAAIK,KAAKC,IAChEa,EAAST,YAAc,UACvBS,EAASR,SACTQ,EAASP,UAAY,UACrBO,EAASL,YACTK,EAASJ,QAEX,IAoCF,OAjCAK,0BAAgB,WACd,GAAI1B,EAAUe,SAAWhB,EAAegB,QAAS,CAC/C,IAAMY,EAAe3B,EAAUe,QAAQa,YACjCC,EAAgB7B,EAAUe,QAAQe,aAExC9B,EAAUe,QAAQrB,MAAQiC,EAC1B3B,EAAUe,QAAQpB,OAASkC,EAC3B,IAAMzB,EAAMJ,EAAUe,QAAQgB,WAAW,MACnC1B,EAAWL,EAAUe,QAAQrB,MAC7BY,EAAYN,EAAUe,QAAQpB,OACpCM,EAAoBc,QAAUb,EAC5BE,EACAC,EACAC,GAEFL,EAAoBc,QAAQiB,KAAKC,OAEjC,IAAMR,EAAW1B,EAAegB,QAAQgB,WAAW,MAC7CG,EAAmBnC,EAAegB,QAAQa,YAC1CO,EAAoBpC,EAAegB,QAAQe,aACjD/B,EAAegB,QAAQrB,MAAQwC,EAC/BnC,EAAegB,QAAQpB,OAASwC,EAEhCX,EACEC,EACAS,EACAC,KAGH,CAACnC,EAAWE,EAAqCsB,IAEpD3B,EAAekB,QAAUnB,EAGvBwC,EAAAC,EAAAC,cAACzD,EAAD,KACEuD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAClD,EAAD,CAAcmD,IAAKvC,EAAWN,MAAOA,EAAOC,OAAQA,IACpDyC,EAAAC,EAAAC,cAACrD,EAAD,CAAasD,IAAKxC,EAAgBL,MAAOA,EAAOC,OAAQA,+GCpG9D,IAAM6C,EAAgB1D,IAAOC,IAAV0D,KA8CnB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,iBAAOT,EAAAC,EAAAC,cAtCP,WAAe,IAAAQ,EACmBC,oBAAS,GAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACII,EADJJ,EAAA,GAAAK,EAE6BN,mBAAS,GAFtCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENzD,EAFM0D,EAAA,GAESC,EAFTD,EAAA,GAIPE,EAAgBrD,sBAAY,SAACsD,GACjCL,EAAY,SAACD,GAAD,OAAwBA,KACnC,IAgBH,OAdAO,oBAAU,WACR,IAMMC,EAAaC,YANQ,WACpBT,GACHI,EAAiB,SAAC3D,GAAD,OAA2BA,EAAgB,KAIb,KAEnD,OAAO,WACLiE,cAAcF,KAEf,CAACR,IAGFf,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,2BAAS1C,EAAT,UACAwC,EAAAC,EAAAC,cAACE,EAAD,CAAeuB,QAASP,GACtBpB,EAAAC,EAAAC,cAAC0B,EAAD,CACEtE,MAAO,QACPC,OAAQ,QACRF,kBAAmB0D,EAAW,UAAY,UAC1CvD,cAAeA,OAQlB,MAAS8C","file":"static/js/main.61e97393.chunk.js","sourcesContent":["import Styled from 'styled-components'\n\nconst PositionRelativeDivWrapper = Styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n`\n\nconst InnerCanvas = Styled.canvas`\n  position: absolute;\n  z-index:300;\n`\n\nconst OutterCanvas = Styled.canvas`\n  position: absolute;\n  z-index:1;\n`\n\nexport { PositionRelativeDivWrapper, InnerCanvas, OutterCanvas }\n","import React, { useRef, useLayoutEffect, useCallback, useMemo } from 'react'\nimport { PositionRelativeDivWrapper, OutterCanvas, InnerCanvas } from './styled'\n\ninterface Props {\n  width: string\n  height: string\n  innerCanvasColor?: string\n  outterCanvasColor?: string\n  passedSeconds: number\n}\n\nconst MoveCircle = ({\n  outterCanvasColor = '#000000',\n  width,\n  height,\n  passedSeconds,\n}: Props) => {\n  const _PassedSeconds = useRef<number>(0)\n  const innerCanvasRef = useRef<HTMLCanvasElement | null>(null)\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\n  const tomatoClockMinutes = 25\n  const wholeTomatoClockMinutesProgress =  60 * tomatoClockMinutes\n  const clockLoopRunFuncRef = useRef<FrameRequestCallback | null>(null)\n  const requestDrawMoveGraduallyCircleFrame = useCallback(\n    (ctx: CanvasRenderingContext2D, ctxWidth: number, ctxHeight: number) => (\n      eTime: DOMHighResTimeStamp\n    ) => {\n      ctx.clearRect(0, 0, ctxWidth, ctxHeight)\n      ctx.translate(ctxWidth / 2, ctxHeight / 2)\n      ctx.rotate(-Math.PI / 2)\n      ctx.beginPath()\n\n      ctx.arc(\n        0,\n        0,\n        (ctxWidth + ctxHeight) / 4,\n        0 * Math.PI,\n        (_PassedSeconds.current / wholeTomatoClockMinutesProgress) * 2 * Math.PI,\n      )\n      ctx.strokeStyle = outterCanvasColor\n      ctx.stroke()\n      ctx.fillStyle = outterCanvasColor\n      ctx.lineTo(0, 0)\n      ctx.closePath()\n      ctx.fill()\n      ctx.setTransform(1, 0, 0, 1, 0, 0)\n      clockLoopRunFuncRef.current &&\n        requestAnimationFrame(clockLoopRunFuncRef.current)\n    },\n    [wholeTomatoClockMinutesProgress, clockLoopRunFuncRef, outterCanvasColor],\n  )\n\n  const drawInnerCircle = useCallback(\n    (\n      innerCtx: CanvasRenderingContext2D,\n      ctxWidth: number,\n      ctxHeight: number,\n    ) => {\n      innerCtx.translate(ctxWidth / 2, ctxHeight / 2)\n      innerCtx.beginPath()\n      innerCtx.arc(0, 0, (ctxWidth + ctxHeight) / 4 - 30, 0, 2 * Math.PI)\n      innerCtx.strokeStyle = '#FFFFFF'\n      innerCtx.stroke()\n      innerCtx.fillStyle = '#FFFFFF'\n      innerCtx.closePath()\n      innerCtx.fill()\n    },\n    [],\n  )\n\n  useLayoutEffect(() => {\n    if (canvasRef.current && innerCanvasRef.current) {\n      const canvas1Width = canvasRef.current.offsetWidth\n      const canvas1Height = canvasRef.current.offsetHeight\n\n      canvasRef.current.width = canvas1Width\n      canvasRef.current.height = canvas1Height\n      const ctx = canvasRef.current.getContext('2d')\n      const ctxWidth = canvasRef.current.width\n      const ctxHeight = canvasRef.current.height\n      clockLoopRunFuncRef.current = requestDrawMoveGraduallyCircleFrame(\n        ctx as CanvasRenderingContext2D,\n        ctxWidth,\n        ctxHeight,\n      )\n      clockLoopRunFuncRef.current(Date.now())\n\n      const innerCtx = innerCanvasRef.current.getContext('2d')\n      const innerCanvasWidth = innerCanvasRef.current.offsetWidth\n      const innerCanvasHeight = innerCanvasRef.current.offsetHeight\n      innerCanvasRef.current.width = innerCanvasWidth\n      innerCanvasRef.current.height = innerCanvasHeight\n\n      drawInnerCircle(\n        innerCtx as CanvasRenderingContext2D,\n        innerCanvasWidth,\n        innerCanvasHeight,\n      )\n    }\n  }, [canvasRef, requestDrawMoveGraduallyCircleFrame, drawInnerCircle])\n\n  _PassedSeconds.current = passedSeconds\n\n  return (\n    <PositionRelativeDivWrapper>\n      <h4>move circle</h4>\n      <OutterCanvas ref={canvasRef} width={width} height={height} />\n      <InnerCanvas ref={innerCanvasRef} width={width} height={height} />\n    </PositionRelativeDivWrapper>\n  )\n}\n\nexport default MoveCircle\n","import React, { useState, useCallback, useEffect } from 'react'\nimport { render } from 'react-dom'\n\nimport './styles.css'\nimport MoveCircle from './components/movecircle'\nimport Styled from 'styled-components'\n\nconst CanvasWrapDiv = Styled.div`\n  width: 500px;\n  height:500px;\n`\n\nconst countDownMinutes = 25\n\nlet countDownAllMillSeconds = countDownMinutes * 60 // 1500 秒\n\nfunction App() {\n  const [isPaused, setIsPaused] = useState(false)\n  const [passedSeconds, setPassedSeconds] = useState(0)\n\n  const handleIsPause = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    setIsPaused((isPaused: boolean) => !isPaused)\n  }, [])\n\n  useEffect(() => {\n    const doSetPassedSeconds = () => {\n      if (!isPaused) {\n        setPassedSeconds((passedSeconds: number) => passedSeconds + 1)\n      }\n    }\n\n    const intervalID = setInterval(doSetPassedSeconds, 1000)\n\n    return () => {\n      clearInterval(intervalID)\n    }\n  }, [isPaused])\n\n  return (\n    <div className=\"App\">\n      <div> 過了{passedSeconds}秒</div>\n      <CanvasWrapDiv onClick={handleIsPause}>\n        <MoveCircle\n          width={'500px'}\n          height={'500px'}\n          outterCanvasColor={isPaused ? '#000000' : '#FF4384'}\n          passedSeconds={passedSeconds}\n        />\n      </CanvasWrapDiv>\n    </div>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nrender(<App />, rootElement)\n"],"sourceRoot":""}